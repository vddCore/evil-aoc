PawnDirection = {
  NORTH: 0,
   EAST: 1,
  SOUTH: 2,
   WEST: 3
};

PawnMovements = {
  [PawnDirection.NORTH] => { x: 0, y: -1 },
   [PawnDirection.EAST] => { x: 1, y: 0 },
  [PawnDirection.SOUTH] => { x: 0, y: 1 },
   [PawnDirection.WEST] => { x: -1, y: 0 }
};

Pawn = { new: self::fn() -> {
  last_x: 0,
  last_y: 0,
  x: 0,
  y: 0,
  direction: PawnDirection.NORTH,

  distance_from_start: self::fn() -> math.abs(0 - self.x) + math.abs(0 - self.y),

  reset: self::fn() {
    self.x = 0;
    self.y = 0;
    self.direction = PawnDirection.NORTH;
  },

  rotate: self::fn(indicator) {
    rw val nextDirection = self.direction;

    if (indicator == "L") {
      nextDirection--;
      if (nextDirection < 0) {
        nextDirection = PawnDirection.WEST;
      }
    } elif (indicator == "R") {
      nextDirection++;
      
      if (nextDirection >= #PawnDirection) {
        nextDirection = PawnDirection.NORTH;
      }
    } else -> core.fail("Invalid direction indicator '$indicator'.");
    self.direction = nextDirection;
  },

  move: self::fn(distance, on_step = nil) {
    if (distance !is Number) {
      core.fail("Invalid distance value type '" + @typeof(distance) + "'.");
    }

    val movement = PawnMovements[self.direction];

    self.last_x = self.x;
    self.last_y = self.y;

    if (on_step is Function) {
      for (rw val i = 0; i < distance; i++) {
        self.x += movement.x;
        self.y += movement.y;

        if (on_step(self.x, self.y)) {
          break;
        }
      }
    } else {
      self.x += distance * movement.x;
      self.y += distance * movement.y;
    }
  },

  follow_instruction: self::fn(rw instruction, on_step = nil) {
    if (instruction !is String) {
      core.fail("Invalid instruction value type '" + @typeof(instruction) + "'.");
    }

    val rotation = instruction[0];
    instruction = str.trim(instruction, "L", "R");
    val distance = $instruction;

    self::rotate(rotation);
    self::move(distance, on_step);
  },
}};