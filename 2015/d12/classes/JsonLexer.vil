val JsonToken = require("JsonToken");

ret { new: self::fn() -> {
  string: nil,
  char: nil,
  pos: 0,
  line: 1,
  col: 1,
  token_type: JsonToken.EOF,
  token_value: nil,
  
  __num_alphabet: "1234567890",

  init: self::fn(string) {
    self.string = string;
    self.char = nil;
    self.pos = 0;
    self.line = 1;
    self.col = 1;
    self.token_type = JsonToken.EOF;
    self.token_value = nil;

    self::advance();
    self::next();
  },

  next: self::fn() {
    if (self.char == nil) {
      self.token_type = JsonToken.EOF;
      self.token_value = nil;

      ret nil;
    }

    if (self.char == "+" 
    ||  self.char == "-" 
    ||  self.char == "." 
    ||  self.char in self.__num_alphabet) 
    {
      self.token_type = JsonToken.NUM_LITERAL;

      rw val value = "";
      rw val got_dot = false;

      if (self.char == "+") {
        value += self.char;
        self::advance();
      } elif (self.char == "-") {
        value += self.char;
        self::advance();
      } elif (self.char == ".") {
        value += self.char;
        got_dot = true;
        self::advance();
      }

      while (true) {
        if (self.char == ".") {
          if (got_dot) -> nil;
        
          value += self.char;
          self::advance();
        } elif (self.char in self.__num_alphabet) {
          value += self.char;
          self::advance();
        } else break;
      }

      self.token_value = $value;
    } elif (self.char == nil) {
      self.token_type = JsonToken.EOF;
      self.token_value = nil;
    } elif (self.char == '"') {
      rw val literal = "";

      self::advance();
      
      while (self.char != '"') {
        if (self.char == nil) -> nil;

        if (self.char == "\\") {
          self::advance();

          if (self.char == "n") {
            literal += '\\n';
          } elif (self.char == "b") {
            literal += '\\b';
          } elif (self.char == "r") {
            literal += '\\r';
          } else {
            literal += self.char;
          }

          self::advance();
          skip;
        } else {
          literal += self.char;
          self::advance();
        }
      }

      self.token_type = JsonToken.STR_LITERAL;
      self.token_value = literal;

      self::advance();
    } else {
      if (self.char == "{") {
        self.token_type = JsonToken.L_BRACE;
      } elif (self.char == "}") {
        self.token_type = JsonToken.R_BRACE;
      } elif (self.char == "[") {
        self.token_type = JsonToken.L_BRACKET;
      } elif (self.char == "]") {
        self.token_type = JsonToken.R_BRACKET;
      } elif (self.char == ",") {
        self.token_type = JsonToken.COMMA;
      } elif (self.char == ":") {
        self.token_type = JsonToken.COLON;
      }
      
      self.token_value = self.char;
      self::advance();
    }

    ret {
      type: self.token_type,
      value: self.token_value
    };
  },

  advance: self::fn() {
    rw val pos = self.pos;
    val str = self.string;

    if (pos > #str) {
      self.char = nil;
      self.token_value = nil;
      self.token_type = JsonToken.EOF;
      ret;
    }

    rw val c = str[pos++];
    while (c == " " || c == "\t" || c == "\n") {
      if (c == "\n") {
        self.line++;
        self.col = 1;
      }

      c = str[pos++];
    }

    self.char = c;
    self.pos = pos;
  }
}};