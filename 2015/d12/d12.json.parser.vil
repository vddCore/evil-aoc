#include "d12.json.lexer.vil"

#[vminit;noreg] fn __d12_json_nodes() {
  JsonNodeType = {
    JOBJECT: 0,
    JARRAY: 1,
    STRING: 2,
    NUMBER: 3
  };

  JsonObjectNode = { new: self::fn() -> {
    type: JsonNodeType.JOBJECT,
    parent: nil,
    children: { },

    add_child: self::fn(key, child) {
      self.children[key] = child;
      child.parent = self;
    }
  }};

  JsonArrayNode = { new: self::fn() -> {
    type: JsonNodeType.JARRAY,
    parent: nil,
    children: array { },

    add_child: self::fn(child) {
      arr.push(self.children, child);
      child.parent = self;
    }
  }};

  JsonStringNode = { new: self::fn(value) -> {
    type: JsonNodeType.STRING,
    value: value
  }};

  JsonNumberNode = { new: self::fn(value) -> {
    type: JsonNodeType.NUMBER,
    value: value
  }};
}

#[vminit;noreg] fn __d12_json_parser() {
  JsonParser = { new: self::fn() -> {
    lexer: JsonLexer::new(),

    parse: self::fn(string) {
      self.lexer::init(string);

      if (self.lexer.token_type == JsonToken.L_BRACKET) {
        ret self::jarray();
      } elif (self.lexer.token_type == JsonToken.L_BRACE) {
        ret self::jobject();
      } else -> nil;
    },

    expect: self::fn(token) {
      if (self.lexer.token_type != token) 
        -> core.fail("unexpected token: " + @self.lexer.token_value);

      val expected_val = self.lexer.token_value;
      
      self.lexer::next();
      ret expected_val;
    },

    jarray: self::fn() {
      val jarray = JsonArrayNode::new();
      self::expect(JsonToken.L_BRACKET);

      while (self.lexer.token_type != JsonToken.R_BRACKET) {
        if (self.lexer.token_type == JsonToken.L_BRACKET) {
          jarray::add_child(self::jarray());
        } elif (self.lexer.token_type == JsonToken.L_BRACE) {
          jarray::add_child(self::jobject());
        } elif (self.lexer.token_type == JsonToken.NUM_LITERAL) {
          jarray::add_child(self::number());
        } elif (self.lexer.token_type == JsonToken.STR_LITERAL) {
          jarray::add_child(self::string());
        } elif (self.lexer.token_type == JsonToken.EOF) {
          core.fail("unexpected eof in json array");
        } else {
          core.fail("unexpected token in json array: " + @self.lexer.token_value);
        }

        if (self.lexer.token_type != JsonToken.R_BRACKET) {
          self::expect(JsonToken.COMMA);
        }
      }

      self::expect(JsonToken.R_BRACKET);
      ret jarray;
    },
    
    jobject: self::fn() {
      val jobject = JsonObjectNode::new();
      self::expect(JsonToken.L_BRACE);

      while (self.lexer.token_type != JsonToken.R_BRACE) {
        val key = self::expect(JsonToken.STR_LITERAL);
        self::expect(JsonToken.COLON);

        if (self.lexer.token_type == JsonToken.L_BRACKET) {
          jobject::add_child(key, self::jarray());
        } elif (self.lexer.token_type == JsonToken.L_BRACE) {
          jobject::add_child(key, self::jobject());
        } elif (self.lexer.token_type == JsonToken.NUM_LITERAL) {
          jobject::add_child(key, self::number());
        } elif (self.lexer.token_type == JsonToken.STR_LITERAL) {
          jobject::add_child(key, self::string());
        } elif (self.lexer.token_type == JsonToken.EOF) {
          core.fail("unexpected eof in json object");
        } else {
          core.fail("unexpected token in json object: " + @self.lexer.token_value);
        }

        if (self.lexer.token_type != JsonToken.R_BRACE) {
          self::expect(JsonToken.COMMA);
        }
      }

      self::expect(JsonToken.R_BRACE);
      ret jobject;
    },

    number: self::fn() -> JsonNumberNode::new(
      self::expect(JsonToken.NUM_LITERAL)
    ),

    string: self::fn() -> JsonStringNode::new(
      self::expect(JsonToken.STR_LITERAL)
    )
  }};
}